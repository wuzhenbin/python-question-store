

# 协程?
协程 执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。
协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，
因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。
多线程因为GIL锁的原因，切换上下文成本比较高
由于要不断的加锁释放GIL全局锁，切换线程而耗费大量时间

任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，
让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多
线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。

单线程总是最慢的，多进程总是最快的。
多线程适合在IO密集场景下使用，譬如爬虫，网站开发等
多进程适合在对CPU计算运算要求较高的场景下使用，譬如大数据分析，机器学习等
多进程虽然总是最快的，但是不一定是最优的选择，因为它需要CPU资源支持下才能体现优势

协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，
既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。
协程就是发挥单个线程下最好的性能

asyncio
asyncio的编程模型就是一个消息循环 我们从asyncio模块中直接获取一个EventLoop的引用，
然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO。